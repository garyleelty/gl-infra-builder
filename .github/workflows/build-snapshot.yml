name: Build GL.INET MT2500

on:
  workflow_dispatch:

  push:
    branches:
      - DIY
    paths:
      - '.github/workflows/GL.INET_Lite.yml'
      - "*.yml"
      - "*.sh"

#inputs换env
env:
  device: "target_mt7981_gl-mt2500"
  record: "4.2.1正式版,openclash v103稳定版"
  glversion: "5.4.211A"
  istore: false
  isdocker: false
  isrelease: false
  pushplus: true


jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-android: "true"
          remove-haskell: "true"
          remove-dotnet: "true"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt update -y
          sudo apt install libfuse-dev -y
          sudo apt install build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml -y
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          git config --global user.email "AoThen@Github.com"
          git config --global user.name "AoThen"

      # - name: Generate release text
      #   if: true && !failure() && !cancelled()
      #   run: |
      #     tail -n $($(wc -l custom.yml)-8) custom.yml
      #     echo "release_text=$(tail -n $($(wc -l custom.yml)-8) custom.yml)" >> $GITHUB_OUTPUT
      #     echo "status=success" >> $GITHUB_OUTPUT
      # cp -r custom/ ./gl-infra-builder/feeds/custom/
      # echo ${{ env.glversion2 }} >files/etc/version.type

      - name: Clone
        run: |
          echo "Usebase=$PWD" >> $GITHUB_ENV
          git clone --depth 1 https://github.com/gl-inet/gl-infra-builder.git
          git clone --depth 1 https://github.com/gl-inet/glinet4.x.git
          cp ./glinet4.x/pkg_config/gl_pkg_config_mt2500.mk  ./glinet4.x/mt7981/gl_pkg_config.mk
          cp ./glinet4.x/pkg_config/glinet_depends_mt2500.yml  ./gl-infra-builder/profiles/glinet_depends.yml
          cp *.yml ./gl-infra-builder/profiles
          cd gl-infra-builder
          python3 setup.py -c configs/config-mt798x-7.6.6.1.yml
          cd mt798x
          ./scripts/gen_config.py glinet_depends custom
          echo ${{ env.glversion }} >files/etc/glversion

      - name: Make
        run: |
          cd ${{ env.Usebase }}/gl-infra-builder/mt798x
          ./scripts/feeds update -a && ./scripts/feeds install -a && make defconfig
          rm -rf feeds/packages/lang/golang
          svn co https://github.com/openwrt/packages/branches/openwrt-22.03/lang/golang feeds/packages/lang/golang
          make -j$(expr $(nproc) + 1) GL_PKGDIR=${{ env.Usebase }}/glinet4.x/mt7981/ V=s
          
      # rm -rf feeds/packages/net/miniupnpd && svn co https://github.com/immortalwrt/packages/branches/openwrt-18.06/net/miniupnpd feeds/packages/net/miniupnpd #miniupnpd

      - name: Copy
        run: |
          mkdir ~/firmware
          mkdir ~/packages
          cd ${{ env.Usebase }}/gl-infra-builder/mt798x/bin/targets/*/*
          rm -rf packages
          mv -f ./* ~/firmware
          mv -f ${{ env.Usebase }}/gl-infra-builder/mt798x/bin/packages/* ~/packages

      # cp -rf ./* ~/firmware
      # cp -rf ${{ env.Usebase }}/gl-infra-builder/mt7981/bin/packages/* ~/packages

      # - name: Make
      #   run: |
      #     sudo chmod +x ./build.sh
      #     ./build.sh ~ ${{ env.device }} ${{ env.ui }} ${{ env.glversion1 }} ${{ env.glversion2 }} ${{ env.istore }} ${{ env.isdocker }}

      - name: Organize files
        id: organize
        if: true && !failure() && !cancelled()
        run: |
          cd ~/firmware
          echo "
          device: ${{ env.device }}
          record: ${{ env.record }}
          glversion: ${{ env.glversion }}
          istore: ${{ env.istore }}
          isrelease: ${{ env.isrelease }}
          pushplus: ${{ env.pushplus }} " > info.txt
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          rm -rf "openwrt-imagebuilder-mediatek-mt7981.Linux-x86_64.tar.xz"
          rm -rf "openwrt-mediatek-mt7981-glinet_gl-mt2500-initramfs-kernel.bin"
          cd ~/packages
          echo "
          device: ${{ env.device }}
          record: ${{ env.record }}
          glversion: ${{ env.glversion }}
          istore: ${{ env.istore }}
          isrelease: ${{ env.isrelease }}
          pushplus: ${{ env.pushplus }} " > info.txt
          echo "PACKAGES=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload packages directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_packages${{ env.FILE_DATE }}
          path: ${{ env.PACKAGES }}

      - name: Del packages directory
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        run: rm -rf ~/packages

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_firmware${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: true && !failure() && !cancelled()
        run: |
          echo "release_tag=${{env.device}}.$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: env.isrelease == 'true' && steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_FIRMWARE }}
        with:
          body: ${{ env.record }}-${{ github.event_name }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*

      - name: Pushplus Info
        if: env.pushplus == 'true' && steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        run: |
          curl "http://www.pushplus.plus/send?token=${{ secrets.PUSHPLUS_TOKEN }}&title=Actions_Success&content=${{ env.device }}&template=txt"


        #   if [[ "${{ env.INFORMATION_NOTICE }}" == "PUSH" ]]; then
        #   if [[ "${{steps.gitpush.outcome}}" == 'success' ]]; then
        #     curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="开始编译【${{matrix.target}}】" --data "content=🎉 主人💕：您的编译脚本成功触发【${{matrix.target}}】文件夹编译【${REPO_BRANCH}分支的${{env.TARGET_PROFILE}}】固件中,请耐心等待...... 😋(${{env.WAREHOUSE_MAN}}仓库的#${{env.RUN_NUMBER}}号)！($(date +%Y年%m月%d号%H时%M分))💐" "http://www.pushplus.plus/send"
        #   fi
        # fi